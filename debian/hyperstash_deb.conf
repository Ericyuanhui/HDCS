### Commented entries have reasonable defaults.
### Uncomment to edit them.
# Source: <source package name; defaults to package name>
Section: misc
Priority: optional
# Homepage: <enter URL here; no default>
Standards-Version: 3.9.2

Package: hyperstash
Version: 0.1
Maintainer: Your Name <yourname@example.com>
#Pre-Depends: <comma-separated list of packages>
Depends: libboost-thread-dev (>= 1.5.4),libboost-serialization-dev (>=1.5.4),libboost-system-dev (>=1.5.4),librbd-dev,librados-dev
#Recommends: <comma-separated list of packages>
#Suggests: <comma-separated list of packages>
#Provides: <comma-separated list of packages>
#Replaces: <comma-separated list of packages>
Architecture: all
#Copyright: <copyright file; defaults to GPL2>
#Changelog: <changelog file; defaults to a generic changelog>
#Readme: <README.Debian file; defaults to a generic one>
# Extra-Files: <comma-separated list of additional files for the doc directory>
Files: ./src/librbc.so /usr/local/lib/librbc.so
   ./src/include/rbc/librbc.h /usr/local/include/rbc/librbc.h
#  <more pairs, if there's more than one file to include. Notice the starting space>
Description: <Hyper Converged Cache for Cloud> 
 With the strong requirements of cloud computing and software defined architecture,
 more and more data centers are adopting distribute storage solutions,
 which usually centralized, based on commodity hardware,
 with large capacity and designed for scale-out solution.
 However, the performance of the distribute storage system suffers when running multiple
 VM on the compute node due to remote access of VM I/O in this architecture,
 especially for database workloads. Meanwhile, the critical enterprise readiness features
 like deduplication, compression are usually missed.
 .
 In this work we proposed a new novel client-side cache solution to improve the performance
 of cloud VM storage, which will turn current common cloud storage solution into a hyper
 converged solution. In our cache solution it provides strong reliability, crash-consistent,
 various data services like deduplication and compression on non-volatile storage backend,
 with configurable modes like write-through and write-back.
 The interface of cache is designed to be flexible to use external plugins or third parity
 cache software. Our evaluation shows that this solution has great performance improvements
 to both read-heavy and write-heavy workloads. We also investigated the potential usage of
 Non-Volatile Memory Technologies in this cache solution.
